//sarah_22011324_lab 8 -> searching trees

#include <iostream>
using namespace std;

// Node structure
class Node {
public:
    string name;
    Node* left;
    Node* right;

    Node(const string& n) : name(n), left(nullptr), right(nullptr) {}
};

// Binary Seach Tree class
class Tree {
private:
    Node* root;

    // Recursive helper for searching
    Node* search_recursive(Node* current, const string& target) {
        if (!current) return nullptr;
        if (current->name == target) return current;

        Node* found = search_recursive(current->left, target);
        return found ? found : search_recursive(current->right, target);
    }

public:
    Tree() : root(nullptr) {}

    void add_root(const string& name) {
        root = new Node(name);
    }

    void add_left(Node* parent, const string& name) {
        if (parent) parent->left = new Node(name);
    }

    void add_right(Node* parent, const string& name) {
        if (parent) parent->right = new Node(name);
    }

    Node* get_root() {
        return root;
    }

    Node* search(const string& target) {
        return search_recursive(root, target);
    }

    void display_structure() {
        if (!root) return;

        cout << "Root: " << root->name << endl;

        if (root->left) {
            cout << "Left child of root: " << root->left->name << endl;
            if (root->left->left)
                cout << "Left child of " << root->left->name << ": " << root->left->left->name << endl;
            if (root->left->right)
                cout << "Right child of " << root->left->name << ": " << root->left->right->name << endl;
        }

        if (root->right) {
            cout << "Right child of root: " << root->right->name << endl;
            if (root->right->left)
                cout << "Left child of " << root->right->name << ": " << root->right->left->name << endl;
            if (root->right->right)
                cout << "Right child of " << root->right->name << ": " << root->right->right->name << endl;
        }
    }
};

int main() {
    Tree tree;

    tree.add_root("A");
    Node* root = tree.get_root();

    tree.add_left(root, "B");
    tree.add_right(root, "C");

    tree.add_left(root->left, "D");
    tree.add_right(root->left, "E");
    tree.add_left(root->right, "F");
    tree.add_right(root->right, "G");

    tree.display_structure();

    // Search for a node
    string target = "E";
    Node* result = tree.search(target);

    if (result)
        cout << "\nNode '" << target << "' found." << endl;
    else
        cout << "\nNode '" << target << "' not found." << endl;

    return 0;
}
