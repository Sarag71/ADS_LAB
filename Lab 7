#include <iostream>
using namespace std;

// Node structure for the binary tree
class Node {
public:
    string name;
    Node* left;
    Node* right;

    Node(const string& n) : name(n), left(nullptr), right(nullptr) {}
};

// Binary tree class
class Tree {
public:
    Node* root;

    Tree() : root(nullptr) {}

    void add_root(const string& name) {
        root = new Node(name);
    }

    void add_left(Node* parent, const string& name) {
        if (parent)
            parent->left = new Node(name);
    }

    void add_right(Node* parent, const string& name) {
        if (parent)
            parent->right = new Node(name);
    }

    void display_structure() {
        if (!root) return;

        cout << "Root: " << root->name << endl;

        if (root->left) {
            cout << "Left child of root: " << root->left->name << endl;

            if (root->left->left)
                cout << "Left child of " << root->left->name << ": " << root->left->left->name << endl;

            if (root->left->right)
                cout << "Right child of " << root->left->name << ": " << root->left->right->name << endl;
        }

        if (root->right) {
            cout << "Right child of root: " << root->right->name << endl;

            if (root->right->left)
                cout << "Left child of " << root->right->name << ": " << root->right->left->name << endl;

            if (root->right->right)
                cout << "Right child of " << root->right->name << ": " << root->right->right->name << endl;
        }
    }
};

int main() {
    Tree tree;

    tree.add_root("A");
    tree.add_left(tree.root, "B");
    tree.add_right(tree.root, "C");
    tree.add_left(tree.root->left, "D");
    tree.add_right(tree.root->left, "E");
    tree.add_left(tree.root->right, "F");
    tree.add_right(tree.root->right, "G");

    tree.display_structure();

    return 0;
}
